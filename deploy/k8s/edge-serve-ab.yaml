apiVersion: v1
kind: Namespace
metadata:
  name: edge-serve

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: edge-serve-config
  namespace: edge-serve
data:
  # App runtime config (env-var overrides used by server.py and settings)
  MAX_BODY_BYTES: "10485760"         # 10 MiB
  RATE_LIMIT_RPS: "5"
  RATE_LIMIT_BURST: "10"
  AB_WEIGHT_A: "1.0"
  AB_WEIGHT_B: "0.0"
  CANARY_ENABLED: "false"
  SHADOW_ENABLED: "true"
  STICKY_COOKIE: "ab_group"
  REQ_TIMEOUT_MS: "800"              # used by settings.req_timeout_ms if applicable
  ORT_PROVIDERS: "CPUExecutionProvider"  # comma-separated if multiple

---
apiVersion: v1
kind: Secret
metadata:
  name: edge-serve-secrets
  namespace: edge-serve
type: Opaque
stringData:
  ADMIN_TOKEN: "replace-with-strong-admin-token"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: edge-serve
  namespace: edge-serve
  labels:
    app: edge-serve
spec:
  replicas: 2
  selector:
    matchLabels:
      app: edge-serve
  template:
    metadata:
      labels:
        app: edge-serve
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
    spec:
      containers:
        - name: web
          image: your-registry/edge-serve-ab:latest
          imagePullPolicy: IfNotPresent
          args:
            - uvicorn
            - --app-dir
            - src
            - app.server:create_app
            - --factory
            - --host
            - 0.0.0.0
            - --port
            - "8080"
          envFrom:
            - configMapRef:
                name: edge-serve-config
            - secretRef:
                name: edge-serve-secrets
          ports:
            - name: http
              containerPort: 8080
          resources:
            requests:
              cpu: "250m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10001

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: edge-serve-pdb
  namespace: edge-serve
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: edge-serve

---
apiVersion: v1
kind: Service
metadata:
  name: edge-serve
  namespace: edge-serve
spec:
  selector:
    app: edge-serve
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
  type: ClusterIP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: edge-serve
  namespace: edge-serve
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: edge-serve
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 75

# OPTIONAL Ingress (uncomment and adjust if you have an ingress controller)
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: edge-serve
#   namespace: edge-serve
#   annotations:
#     kubernetes.io/ingress.class: nginx
# spec:
#   rules:
#     - host: edge.your-domain.com
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: edge-serve
#                 port:
#                   number: 80
